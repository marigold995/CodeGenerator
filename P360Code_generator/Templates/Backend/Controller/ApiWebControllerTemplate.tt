<#@ template language="C#"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="_360Generator.Metadata" #>
<#@ parameter name="module" type="_360Generator.Metadata.Module"#>
<#@ parameter name="entity" type="System.String"#>
<#@ parameter name="screens" type="System.Collections.Generic.List<_360Generator.Metadata.Entity.screenEnum>"#>
using _360.Api.Model.<#= module.ModuleName #>;
using _360.Api.Repository.<#= module.ModuleName  #>;
using _360.Api.Web.<#= module.ModuleName  #>.Infrastructure;
using _360Generator.Templates;
using _360.Framework.Api.Helpers;
using _360.Framework.Api.Infrastructure;
using _360.Framework.Libs.Extensions;
using AutoMapper;
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;

namespace _360.Api.Web.<#=module.ModuleName #>.Controllers
{
	[Route("api/v1/<#= LowerInitial(entity ) #>s")]
	[P360AuthorizeApi]
	[<#= entity  #>ExceptionFilter]
	public class <#=entity #>Controller : ApiController {
		private readonly I<#= entity  #>Repository _<#= LowerInitial(entity ) #>Repository;

        public <#= entity  #>Controller(I<#= entity  #>Repository <#= LowerInitial(entity ) #>Repository)
        {
            _<#= LowerInitial(entity ) #>Repository = <#= LowerInitial(entity ) #>Repository;
        }

		<#if (screens.Contains(Entity.screenEnum.GetAll)){#>                
		[HttpGet]
		[Route("~/api/v1/companies/{companyId}/<#= LowerInitial(entity ) #>s")]
		[ResponseType(typeof(CollectionResult<<#= entity  #>Dto>))]
		public IHttpActionResult GetAll(string companyId, [FromUri] string fields = "")
		{           
			return Ok(new NotImplementedException());
		}<# }#>	        
			
		<#if (screens.Contains(Entity.screenEnum.Get)){#>
		[HttpGet]
		[Route("~/api/v1/companies/{companyId}/<#= LowerInitial(entity ) #>s/{<#= LowerInitial(entity ) #>Id}", Name = "Get<#= entity  #>ById")]
        [ResponseType(typeof(<#= entity  #>Dto))]
		 public IHttpActionResult GetById(string companyId, string <#= LowerInitial(entity ) #>Id)
        {
			return Ok(new NotImplementedException());
		}<# }#>

		<#if (screens.Contains(Entity.screenEnum.Post)){#>
		[HttpPost]       
        public IHttpActionResult Post([FromBody] <#= entity  #>Dto <#= LowerInitial(entity ) #>Dto)
        {
			return BadRequest();
		}<# }#>

		<#if (screens.Contains(Entity.screenEnum.Put)){#>
		[HttpPut]       
        public IHttpActionResult Put([FromBody] <#= entity  #>Dto <#= LowerInitial(entity ) #>Dto)
        {
           return Ok(new NotImplementedException());
        }<# }#>
		
		<#if (screens.Contains(Entity.screenEnum.Delete)){#>
		[HttpDelete]
		public IHttpActionResult Delete(string companyId, string <#= LowerInitial(entity ) #>Id)
        {
            return StatusCode(HttpStatusCode.NoContent);
        }
		<# }#>
	}
}

<#+
 private string LowerInitial(string name)
 { return name[0].ToString().ToLowerInvariant() + name.Substring(1);}
#>