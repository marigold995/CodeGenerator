<#@ template language="C#" #>
<#@ import namespace="_360Generator.Metadata" #>
<#@ parameter name="module" type="_360Generator.Metadata.Module"#>
<#@ parameter name="entity" type="System.String"#>
<#@ parameter name="screens" type="System.Collections.Generic.List<_360Generator.Metadata.Entity.screenEnum>"#>
import { <#= module.ModuleName #>BaseDataService } from 'App/<#= module.ModuleName #>/<#= module.ModuleName #>BaseDataService';
import { DataProviderCallOptions } from 'App/Base/Data/DataProviderCallOptions';
import { DataProviderExecuteOptions } from 'App/Base/Data/DataProviderExecuteOptions';
import { <#= module.ModuleName #>Initializer } from 'App/<#= module.ModuleName #>/<#= module.ModuleName #>Initializer';
import { <#= entity #> } from 'App/<#= module.ModuleName #>/<#= entity #>/Model/<#= entity #>';

export class <#= entity #>DataService extends <#= module.ModuleName #>BaseDataService {

    public get entityName(): string {
        return '<#= LowerInitial(entity) #>s';
    }

    private static instance: <#= entity #>DataService = null;

    constructor(appPath: string) {
        super(appPath);
    }

    public static reset(): void {
        <#= entity #>DataService.instance = null;
    }

    public static getInstance(): <#= entity #>DataService {
        if (<#= entity #>DataService.instance === null) {
            <#= entity #>DataService.instance = new <#= entity #>DataService(<#= module.ModuleName #>Initializer.appPath);
        }

        return <#= entity #>DataService.instance;
    }

    public getList(callOptions: DataProviderCallOptions): kendo.data.DataSource {
        //var url: string = '/api/<#= entity #>?companyContext=' + callOptions.companyContext;
        var url: string = `${this.baseUrlByCompany(callOptions.companyContext)}?aggregate=true`;

        return this.getClientPagingDataSource(url, callOptions);
    }
   
    public refresh(executeOptions: DataProviderExecuteOptions): JQueryPromise<any> {
        var url: string = '/api/<#= entity #>?companyContext=' + executeOptions.companyContext + '&refreshCache=true';

        return this.executeGet(url, executeOptions);
    }
<#if (screens.Contains(Entity.screenEnum.Get)){#>  
    public getLookupList(callOptions: DataProviderCallOptions, isAggregated: boolean): kendo.data.DataSource {
        //var url: string = '/api/<#= entity #>?companyContext=' + callOptions.companyContext + '&isAggregated=' + isAggregated;
        var url: string = `${this.baseUrlByCompany(callOptions.companyContext)}?aggregate=${isAggregated}`;

        return this.getDataSource(url, callOptions);
    }
    
    public getDetail(executeOptions: DataProviderExecuteOptions, <#= LowerInitial(entity) #>Id: string): void {
        /*var url: string = '/api/<#= entity #>?companyContext=' + executeOptions.companyContext
            + '&<#= LowerInitial(entity) #>Id=' + <#= LowerInitial(entity) #>Id;*/
        var url: string = `${this.baseUrlByCompany(executeOptions.companyContext)}/${<#= LowerInitial(entity) #>Id}`;

        this.executeGet(url, executeOptions);
    }
<#} #>
<#if (screens.Contains(Entity.screenEnum.Post)){#>  

    public create(executeOptions: DataProviderExecuteOptions, <#= LowerInitial(entity) #>: <#= entity #>): void {
        //var url: string = '/api/<#= entity #>';

        this.executeCreate(this.baseUrl, executeOptions, <#= LowerInitial(entity) #>);
    }
<#} #>

<#if (screens.Contains(Entity.screenEnum.Put)){#>  
    public update(executeOptions: DataProviderExecuteOptions, <#= LowerInitial(entity) #>: <#= entity #>): void {
        //var url: string = '/api/<#= entity #>';

        this.executeUpdate(this.baseUrl, executeOptions, <#= LowerInitial(entity) #>);
    }
<# } #>

    public search(callOptions: DataProviderCallOptions): kendo.data.DataSource {
       var url: string = '/api/<#= entity #>?companyContext=' + callOptions.companyContext;

        return this.getSearchablePagingDataSource(url, callOptions);
    }

<#if (screens.Contains(Entity.screenEnum.Delete)){#>  

	public deleteItem(executeOptions: DataProviderExecuteOptions, securityAndITPolicyId: string): void {
        var url: string = '/api/SecurityAndITPolicy?companyContext=' + executeOptions.companyContext + '&securityAndITPolicyId=' + securityAndITPolicyId;

        this.executeDelete(url, executeOptions);
    }
}
<# } #>

<#+
 private string LowerInitial(string name)
 { return name[0].ToString().ToLowerInvariant() + name.Substring(1);}
#>