<#@ template language="C#" #>
<#@ import namespace="_360Generator.Metadata" #>
<#@ parameter name="module" type="_360Generator.Metadata.Module"#>
<#@ parameter name="entity" type="System.String"#>
<#@ parameter name="screens" type="System.Collections.Generic.List<_360Generator.Metadata.Entity.screenEnum>"#>
import { BaseViewModel } from 'App/Base/BaseViewModel';
import { Constants } from 'App/Base/Constants';
import { DataProviderCallOptions } from 'App/Base/Data/DataProviderCallOptions';
import { DataProviderExecuteOptions } from 'App/Base/Data/DataProviderExecuteOptions';
import { DataSourceHelper } from 'App/Base/Helpers/DataSourceHelper';
import { ValidationResult } from 'App/Base/Model/ValidationResult';
import { Site } from 'App/Core/Site/Model/Site';
import { <#= entity #>DataProvider } from 'App/<#= module.ModuleName #>/<#= entity #>/Data/<#= entity #>DataProvider';
import { <#= entity #> } from 'App/<#= module.ModuleName #>/<#= entity #>/Model/<#= entity #>';
import { <#= entity #>Validator } from 'App/<#= module.ModuleName #>/<#= entity #>/Validator/<#= entity #>Validator';
import * as _ from 'underscore';

export class <#= entity #>CreateViewModel extends BaseViewModel {
    public <#= LowerInitial(entity) #>: <#= entity #> = null;
	 constructor() {
        super();

        this.setViewTitle('<#= entity #>');
        this.setViewIconClass('fal fa-shiel-alt');

        this.entityName = '<#= entity #>';

        super.init(this);
    }

    public loadData(): void {
        this.set('<#= LowerInitial(entity) #>', new <#= entity #>());

        this.initializeValidation();

        this.trigger(Constants.afterLoadDataEventName);
    }

    public afterLoadData(): void {
        super.afterLoadData();

        this.loadRelatedEntitiesFor<#= entity #>();
    }

	 public loadRelatedEntitiesFor<#= entity #>(): void {

	}

	public initializeValidators(viewDom: JQuery): void {
        this.validator = new <#= entity #>Validator('create<#= entity #>ContentContainer', viewDom, this);
    }

    public create(callback: (success: boolean, <#= LowerInitial(entity) #>Id: string) => void): void {

	}
}

<#+
 private string LowerInitial(string name)
 { return name[0].ToString().ToLowerInvariant() + name.Substring(1);}
#>