<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="_360Generator" #>
<#@ import namespace="_360Generator.Metadata" #>
<#@ parameter name="module" type="_360Generator.Metadata.Module"#>
<#@ parameter name="entity" type="System.String"#>
<#@ parameter name="screens" type="System.Collections.Generic.List<_360Generator.Metadata.Entity.screenEnum>"#>

import { BaseViewModel } from 'App/Base/BaseViewModel';
import { DataProviderCallOptions } from 'App/Base/Data/DataProviderCallOptions';
import { DataProviderExecuteOptions } from 'App/Base/Data/DataProviderExecuteOptions';
import { Constants } from 'App/Base/Constants';
import { RefreshDataEvent } from 'App/Base/Controls/RefreshDataEvent';
import { <#= entity #>DataProvider } from 'App/<#= module.ModuleName #>/<#= entity #>/Data/<#= entity #>DataProvider';
import { <#= entity #> } from 'App/<#= module.ModuleName #>/<#= entity #>/Model/<#= entity #>';
import { CompanyInfo } from 'App/Base/Framework/CompanyInfo';

export class <#= entity #>ListViewModel extends BaseViewModel {

    public <#= LowerInitial(entity) #>DataSource: kendo.data.DataSource = this.getInitialDataSource();
    public hasCyberDetectionContract: boolean = false;

    constructor() {
        super();

        this.setViewTitle('<#= entity #>List');
        this.setViewIconClass('fal fa-shield-alt');
        this.entityName = '<#= entity #>';

        super.init(this);
    }

    public loadData(): void {
        if (this.isSearchView) {
            this.trigger(Constants.afterLoadDataEventName);
        } else {
            this.initDataSource();
        }
    }
	  public afterLoadData(): void {
        super.afterLoadData();
        this.set('hasCyberDetectionContract', CompanyInfo.hasCyberDetectionContract);
    }

    public reloadData(): void {
        var executeOptions: DataProviderExecuteOptions = new DataProviderExecuteOptions(this);

        <#= entity #>DataProvider.refresh(executeOptions)
            .then((): void => {
                this.<#= LowerInitial(entity) #>DataSource.read();
            });
    }

    public refreshData(e: RefreshDataEvent<<#= entity #>>): void {
        var executeOptions: DataProviderExecuteOptions = new DataProviderExecuteOptions(this);

        if (e.target !== null) {
            executeOptions.companyContext = e.target.companyContext;
        }

        <#= entity #>DataProvider.refresh(executeOptions)
            .then((): void => {
                this.initDataSource();
            });
    }


    public initDataSource(): void {
        let callOptions = new DataProviderCallOptions(this);

        this.set('<#= LowerInitial(entity) #>DataSource', this.getDataSource(callOptions));

        this.<#= LowerInitial(entity) #>DataSource.read();

        this.trigger(Constants.dataSourceChangedEventName);
    }

    protected getDataSource(callOptions: DataProviderCallOptions): kendo.data.DataSource {

        callOptions.change = (): void => {

            this.trigger(Constants.afterLoadDataEventName);
        };

        callOptions.companyContext = this.companyContext;

        return <#= entity #>DataProvider.getList(callOptions);
    }
}

<#+
 private string LowerInitial(string name)
 { return name[0].ToString().ToLowerInvariant() + name.Substring(1);}
#>